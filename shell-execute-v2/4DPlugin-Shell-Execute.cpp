/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Shell-Execute.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Shell Execute
 #	author : miyako
 #	2021/10/27
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Shell-Execute.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Shell Execute
            
			case 1 :
				Find_best_application(params);
				break;
			case 2 :
				GET_PROCESS_LIST(params);
				break;
			case 3 :
				OPEN_WITH_APPLICATION(params);
				break;
			case 4 :
				PRINT_WITH_APPLICATION(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void Find_best_application(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT returnValue;

    Param1.fromParamAtIndex(pParams, 1);

#if VERSIONWIN
#define BUFFERLENGTH 1024
    LPCTSTR lpFile = (LPCTSTR)Param1.getUTF16StringPtr();
    DWORD bufferLength = BUFFERLENGTH;
    wchar_t lpResult[BUFFERLENGTH];

    HRESULT res =
        AssocQueryString(ASSOCF_INIT_IGNOREUNKNOWN | ASSOCF_NOTRUNCATE | ASSOCF_REMAPRUNDLL,
            ASSOCSTR_EXECUTABLE,
            lpFile,
            NULL,
            lpResult,
            &bufferLength);

    if (res == S_OK){
		returnValue.setUTF16String((const PA_Unichar*)lpResult, bufferLength);
	}
	else {
		res = AssocQueryStringW(ASSOCF_INIT_IGNOREUNKNOWN | ASSOCF_REMAPRUNDLL,
			ASSOCSTR_DELEGATEEXECUTE,
			lpFile,
			NULL,
			lpResult,
			&bufferLength);
		if (res == S_OK) {
			/*
			association execute command (delegate)
			*/	
		}
	}
    
#else
    NSString *path = Param1.copyPath();
    CFURLRef url;
    if(LSGetApplicationForInfo(
        kLSUnknownType,
        kLSUnknownCreator,
        (CFStringRef)[path pathExtension],
        kLSRolesAll,
        NULL,
        &url) != kLSApplicationNotFoundErr){
            NSString *appPath = (NSString *)CFURLCopyFileSystemPath(url, kCFURLHFSPathStyle);
            CFRelease(url);
            returnValue.setUTF16String(appPath);
            [appPath release];
    }
    [path release];
#endif

    returnValue.setReturn(pResult);
}

void GET_PROCESS_LIST(PA_PluginParameters params) {

    PA_CollectionRef returnValue = PA_CreateCollection();

#if VERSIONWIN
    using namespace std;
    
    HANDLE hProcessSnap = INVALID_HANDLE_VALUE;
    PROCESSENTRY32 pe32;
    
    HANDLE hModuleSnap = INVALID_HANDLE_VALUE;
    MODULEENTRY32 me32;
    
    hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    
    if(hProcessSnap != INVALID_HANDLE_VALUE)
    {
        pe32.dwSize = sizeof(PROCESSENTRY32);
        
        if(Process32First(hProcessSnap, &pe32))
        {
            do
            {
                hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pe32.th32ProcessID);
                wstring process_name = pe32.szExeFile;
                if(hModuleSnap != INVALID_HANDLE_VALUE)
                {
                    me32.dwSize = sizeof(MODULEENTRY32);
                    
                    if(Module32First(hModuleSnap, &me32))
                    {
                        do
                        {
                            wstring module_name = me32.szModule;
                            
                            if(module_name == process_name)
                            {
                                PA_ObjectRef obj = PA_CreateObject();
                                
                                ob_set_a(obj, L"name", (const wchar_t *)me32.szModule);
                                ob_set_a(obj, L"path", (const wchar_t *)me32.szExePath);
                                ob_set_n(obj, L"pid", (double)me32.th32ProcessID);
                                
                                PA_Variable v = PA_CreateVariable(eVK_Object);
                                PA_SetObjectVariable(&v, obj);
                                PA_SetCollectionElement(returnValue, PA_GetCollectionLength(returnValue), v);
                            }
                            
                        }while(Module32Next(hModuleSnap, &me32));
                        CloseHandle(hModuleSnap);
                    }
                }
                
            }while(Process32Next(hProcessSnap, &pe32));
            CloseHandle(hProcessSnap);
        }
    }
#else
    NSArray *launchedApplications = [[NSWorkspace sharedWorkspace] runningApplications];
    
    unsigned int i;
    
    for(i = 0; i < [launchedApplications count]; ++i)
    {
        PA_ObjectRef obj = PA_CreateObject();
        
        NSString *NSApplicationName = (NSString *)[[launchedApplications objectAtIndex:i] valueForKey:@"NSApplicationName"];
        
        ob_set_s(obj, L"name", (const char *)[NSApplicationName UTF8String]);
                
        NSString *NSApplicationPath = (NSString *)[[launchedApplications objectAtIndex:i] valueForKey:@"NSApplicationPath"];
        NSURL *url = [[NSURL alloc]initFileURLWithPath:NSApplicationPath];
        
        if(url)
        {
            NSString *filePath = (NSString *)CFURLCopyFileSystemPath((CFURLRef)url, kCFURLHFSPathStyle);
            ob_set_s(obj, L"path", (const char *)[filePath UTF8String]);
            [filePath release];
            [url release];
        }else{
            ob_set_s(obj, L"path", (const char *)"");
        }
        
        NSNumber *NSApplicationProcessIdentifier = (NSNumber *)[[launchedApplications objectAtIndex:i] valueForKey:@"NSApplicationProcessIdentifier"];
        ob_set_n(obj, L"pid", (double)[NSApplicationProcessIdentifier intValue]);
        
        PA_Variable v = PA_CreateVariable(eVK_Object);
        PA_SetObjectVariable(&v, obj);
        PA_SetCollectionElement(returnValue, PA_GetCollectionLength(returnValue), v);
    }
#endif
    
    PA_ReturnCollection(params, returnValue);
}

void OPEN_WITH_APPLICATION(PA_PluginParameters params) {

//    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;

    C_TEXT Param1;
    C_TEXT Param2;

    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);

#if VERSIONWIN
    LPCTSTR lpFile = (LPCTSTR)Param1.getUTF16StringPtr();
    LPCTSTR lpParameters = (LPCTSTR)Param1.getUTF16StringPtr();
    ShellExecute(NULL, L"open", lpFile, lpParameters, NULL, SW_SHOWNORMAL);
#else
    NSString *document_path = Param1.copyPath();
    if(document_path){
        NSString *application_path = Param2.copyPath();
        if(application_path){
            [[NSWorkspace sharedWorkspace]
            openFile:document_path
            withApplication:application_path];
            [application_path release];
        }
        [document_path release];
    }
#endif
}

void PRINT_WITH_APPLICATION(PA_PluginParameters params) {

//    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;

    C_TEXT Param1;
    C_TEXT Param2;

    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);

#if VERSIONWIN
    LPCTSTR lpFile = (LPCTSTR)Param1.getUTF16StringPtr();
    LPCTSTR lpParameters = (LPCTSTR)Param1.getUTF16StringPtr();
    ShellExecute(NULL, L"print", lpFile, lpParameters, NULL, SW_SHOWNORMAL);
#else
    NSURL *document_url = Param1.copyUrl();
    if(document_url){
        NSString *application_path = Param2.copyPath();
        if(application_path){
            NSBundle *bundle = [[NSBundle alloc]initWithPath:application_path];
            if(bundle){
                NSString *bundleIdentifier = [bundle bundleIdentifier];
                [[NSWorkspace sharedWorkspace]
                openURLs:[NSArray arrayWithObject:document_url]
                withAppBundleIdentifier:bundleIdentifier
                              options:NSWorkspaceLaunchAndPrint
                                      |NSWorkspaceLaunchWithoutActivation
                                      |NSWorkspaceLaunchAsync
       additionalEventParamDescriptor:NULL
                    launchIdentifiers:NULL];
                [bundle release];
            }
            [application_path release];
        }
        [document_url release];
    }
#endif

}

